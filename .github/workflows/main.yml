name: CI-CD Build & Deploy with ArgoCD

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Terraform Init
      working-directory: terraform
      run: terraform init -input=false

    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      working-directory: terraform
      run: terraform destroy -auto-approve

    - name: Login to private Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-1 | \
        docker login --username AWS \
        --password-stdin 929897439921.dkr.ecr.us-east-1.amazonaws.com  

    - name: Build, tag, and push Docker image to ECR
      env:
        ECR_REGISTRY: 929897439921.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: netflix-clone
        IMAGE_TAG: latest
      run: |
        cd app_code
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --name netflix-cluster --region us-east-1

    - name: List contents of helm/netflix-clone
      run: |
        echo "Current working directory: $(pwd)"
        ls -la helm/netflix-clone

    - name: Login Docker to AWS ECR Private Registry
      run: |
        aws ecr get-login-password --region us-east-1 | \
        docker login --username AWS \
        --password-stdin 929897439921.dkr.ecr.us-east-1.amazonaws.com    
 
    # - name: deploy it to eks
    #   run:
    #    helm upgrade --install netflix-clone helm/netflix-clone
 
    # - name: get svc
    #   run: |
    #     kubectl get svc netflix-clone -n default
    #     kubectl describe svc netflix-clone -n default 

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x /tmp/argocd
        sudo mv /tmp/argocd /usr/local/bin/argocd

    - name: Login to ArgoCD
      run: |
        argocd login ${{ secrets.ARGOCD_SERVER_IP }} \
          --username ${{ secrets.ARGOCD_USERNAME }} \
          --password ${{ secrets.ARGOCD_PASSWORD }} \
          --insecure

    - name: Register EKS cluster with ArgoCD
      run: |
        # This adds the EKS cluster to ArgoCD, replace <eks-context-name> with your EKS context
        argocd cluster add $(kubectl config current-context) --insecure

    - name: Add GitHub repo to ArgoCD
      run: |
        argocd repo add https://github.com/${{ github.repository }}.git \
          --username ${{ secrets.GIT_USERNAME }} \
          --password ${{ secrets.GIT_PAT }} \
          --insecure

    - name: Create ArgoCD Application
      run: |
        # Use the EKS cluster API endpoint instead of in-cluster URL
        EKS_API=$(kubectl config view -o jsonpath='{.clusters[?(@.name=="'$(kubectl config current-context)'")].cluster.server}')
        argocd app create netflix-clone \
          --repo https://github.com/${{ github.repository }}.git \
          --path helm/netflix-clone \
          --dest-server $EKS_API \
          --dest-namespace default \
          --sync-policy automated \
          --insecure || echo "App already exists, continuing..."

    - name: Optionally trigger ArgoCD sync
      run: |
        argocd app sync netflix-clone --insecure   
